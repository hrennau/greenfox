We visit the JSON document and check that all href links can be resolved. But
what exactly is a "link"? Is there some hardcoded assumption that items named
"href" contain link URIs?

Certainly not. A link is a mapping of a resource to other resources, defined 
by a LINK DEFINITION. Greenfox includes an elaborate model of link definitions, 
which can use different forms. The most important difference between Greenfox
as of xmlprague and Greenfox of Amsterdam is the introduction of a Link model.

In this case the complete link definition is specified by the @hrefXP expression, 
interpreted as an XPath yielding the items containing link URIs. The @resolvable 
attribute is a constraint, meaning that any URI produced by the href expression 
must be successfully resolved to a target resource. And the 
@minCountTargetResources is another constraint - the number of link target 
resources must be > 0.

So a <links> constraint always has two parts: (1) a Link Definition and (2) 
constraints. The Link Definition maps the resource to other resources. The
constraints check the outcome against expectations. 

The Link Definition may be referenced (@linkName) or locally declared. In the
latter case, the attributes and child possible of the link definition are
used by the link using element itself (here: by the <links> element.
This can be compared to @type versus anonymous type definitions in XSD.

The Link Definition can take quite different forms:
+ "hrefElems" resolves the URIs found in <href> elements
+ "href2JSON" uses a URI expression yielding the target URIs.
+ "myXML" uses a Foxpath expression yielding the target resources. It 
      navigates the file system, rather than find or construct a URI.
+ "linkMeFromAirportsJSON" also uses a Foxpath expression selecting a 
      target resource, but then drills into the document (@targetXP) and 
      yields a node found inside. Any link definition may contain an optional 
      target node selector, narrowing down the link result to selected
      content nodes 
+ "mirror20201006" uses a mirror - it connects resources found at 
      corresponding possitions relative to two different points of reference
      (folders <air> and <air.20201006>).

